const KuCoin = require("kucoin-api");
const eth_db = require("../db/connect/kucoin_connect.js");
const ETHCoin = require("../db/models/eth_coin.js");
const Balance = require("../db/models/balance.js");

const CoinList = require("../coins/coin_list.js");

const storeBalance = require("../interface/balance.js");
const getTickerInfo = require("../interface/ticker.js");

// make the db entry
// maybe put this directly in cron later
storeBalance();
getTickerInfo();

CoinList.map((x) => {
    let myCoin = ETHCoin.find({coin_ticker: x.coin});

    myCoin.then((y, error) => {
        !y[0].order_in_progress ? analysePrice(y[0]) : '';
    })

})

const analysePrice = (coin) => {
    // determine if the price is high enough to sell or low enough to buy

    let high_low_diff = coin.high - coin.low;
    let buy_under = coin.low + (.4*high_low_diff);
    let sell_over = coin.high - (.4*high_low_diff);

    /*
    console.log("COIN     : " + coin.coin_ticker);
    console.log("BUY UNDER: " + buy_under);
    console.log("SELL OVER: " + sell_over);
    console.log("OIP      : " + coin.order_in_progress);
    console.log("CB       : " + coin.coins_bought);
    */

    coin.coins_bought && coin.lastPrice >= sell_over ?
        sellCoins(coin) :
        ''

    !coin.coins_bought && coin.lastPrice <= buy_under ?
        buyCoins(coin) :
        ''

}

const buyCoins = (coin) => {
    // api here
    let kucoin_api = new KuCoin();
    let can_spend = 0;
    let myBalance = Balance.find({balance_ticker: "ETH"});
    myBalance.then((x, err) => {
        can_spend = x[0].amt * .01;
        console.log("Spend AMT: " + can_spend);
        console.log("Units    : " + can_spend/coin.lastPrice)

        kucoin_api.createOrder({
            pair: coin.coin_ticker + "-" + x[0].balance_ticker,
            amount: can_spend/coin.lastPrice,
            price: coin.lastPrice,
            type: "BUY"
        }).then((x, error) => {
            // mark as bought / order in progress
            coin.coins_bought = true;
            coin.save();

            createBalance(coin.coin_ticker, can_spend/coin.lastPrice);
        })

    })



    console.log("Buy " + coin.coin_ticker + " @ " + coin.lastPrice);
}

const sellCoins = (coin) => {
    // api here

    console.log("Sell " + coin.coin_ticker + " @ " + coin.lastPrice);
    kucoin_api.createOrder({
        pair: coin.coin_ticker + "-" + x[0].balance_ticker,
        amount: can_spend/coin.lastPrice,
        price: coin.lastPrice,
        type: "SELL"
    }).then((x, error) => {
        // mark as bought / order in progress
        coin.coins_bought = false;
        coin.save();
    })

}

const createBalance = (ticker, amount) => {
    let newBalance = Balance.find({balance_ticker: ticker});

    newBalance.then((x, err) => {
        if(x.length > 0) {
            x[0].amt += amount;
            x[0].save();
        } else {
            newBalance = new Balance({balance_ticker: ticker, amt: amount});
            newBalance.save();
        }

    })
}

const findBalance = (ticker, amount) => {

}
