'use strict'

require('dotenv').config()

const prettyjson = require('prettyjson-256')
const Kucoin = require('./index')

let kc = new Kucoin(process.env.KUCOIN_API_KEY, process.env.KUCOIN_API_SECRET)

let orderMin = 0.1


kc.getCoins()
  .then((result) => {
    console.log(JSON.stringify(result))
  })
  .catch((err) => {
    console.error(JSON.stringify(err))
  })

/*
kc.getBalance({
    symbol: 'GAS'
  })
  .then((result) => {
    console.log(prettyjson.render(result))
    kc.createWithdrawal({
        symbol: 'GAS',
        amount: result.data.balance,
        address: 'AWcAwoXK6gbMUTojHMHEx8FgEfaVK9Hz5s'
      })
      .then((result) => {
        console.log(prettyjson.render(result))
      })
      .catch((err) => {
        console.error(err)
      })
  })
  .catch((err) => {
    console.error(err)
  })
*/

/*
kc.getBalance({
    symbol: 'GAS'
  })
  .then((result) => {
    console.log(result)
  })
  .catch((err) => {
    console.log(err)
  })

kc.getTicker({
    pair: 'GAS-NEO'
  })
  .then((result) => {
    console.log(result)
  })
  .catch((err) => {
    console.log(err)
  })
*/
/*
// Fetch all active orders
kc.getActiveOrders({
    pair: 'GAS-NEO'
  })
  .then((result) => {
    console.log(JSON.stringify(result))
    // If there are SELL orders (selling GAS for NEO)...
    if (result.data.SELL.length > 0) {
      let order = {
        orderOid: result.data.SELL[0][result.data.SELL[0].length - 1],
        pair: 'GAS-NEO',
        type: 'SELL'
      }
      console.log(order)
      // Cancel the first order
      kc.cancelOrder(order)
        .then((result) => {
          console.log(result)
        })
        .catch((err) => {
          console.log(err)
        })
    } else {
      // Get current GAS balance
      kc.getBalance({
          symbol: 'GAS'
        })
        .then((gasBalance) => {
          console.log(gasBalance)
          // Get current GAS-NEO price
          if (gasBalance.data.balance >= orderMin) {
            kc.getTicker({
                pair: 'GAS-NEO'
              })
              .then((ticker) => {
                console.log(ticker)
                let order = {
                  amount: gasBalance.data.balance,
                  price: (1 == 1 ? 1 : ticker.data.buy),
                  pair: 'GAS-NEO',
                  type: 'SELL'
                }
                console.log(order)
                // Create a SELL order (selling GAS for NEO)
                kc.createOrder(order)
                  .then((result) => {
                    console.log(result)
                  })
                  .catch((err) => {
                    console.log(err)
                  })
              })
              .catch((err) => {
                console.log(err)
              })
          } else {
            console.log('Balance (' + gasBalance.data.balance + ') is less than the minimum (' + orderMin + ') required to place an order.')
          }
        })
        .catch((err) => {
          console.log(err)
        })
    }
  })
  .catch((err) => {
    console.log(err)
  })
*/
